import{_ as l}from"./plugin-vue_export-helper-c27b6911.js";import{r as s,o as r,c,a as e,b as t,d as o,w as n,e as p}from"./app-4e30ef3d.js";const d={},h=e("h2",{id:"task-list-for-new-serializers",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#task-list-for-new-serializers","aria-hidden":"true"},"#"),t(" Task List for New Serializers")],-1),u=e("p",null,"The following list includes the mandatory and recommended tasks for adding a new serializer to abapGit:",-1),f={href:"https://github.com/abapGit/abapGit/issues/5912",target:"_blank",rel:"noopener noreferrer"},_=e("p",null,"If the object type is listed already (and not implemented), check the corresponding issue. Typically, you will find valuable discussions to continue or previous work to use as a starting point.",-1),b={href:"https://github.com/abapGit/abapGit/issues/new",target:"_blank",rel:"noopener noreferrer"},m=e("li",null,[e("p",null,"Wait for the OK from abapGit maintainers"),e("p",null,"Before starting the implementation, it's best to wait for feedback from the community. Once you get the go-ahead, the issue will be assigned to you.")],-1),y={class:"hint-container info"},g=e("p",{class:"hint-container-title"},"Info",-1),w={href:"https://github.com/abapGit/abapGit/issues/5912",target:"_blank",rel:"noopener noreferrer"},k=e("ol",{start:"3"},[e("li",null,[e("p",null,"Implement the serializer class"),e("p",null,"Follow the instructions below. Often, it makes sense to use an existing serializer class as a template. This can save a lot of work especially if the new object type is similar to others.")])],-1),v={class:"hint-container warning"},T=e("p",{class:"hint-container-title"},"Note",-1),G=e("p",null,"You might get lots of abaplint errors. If you are uncertain how to resolve these, maintainers are happy to help.",-1),x={start:"4"},A=e("p",null,"Create a test repository",-1),j={href:"https://github.com/abapGit-tests",target:"_blank",rel:"noopener noreferrer"},B=p("<li><p>Test your implementation</p><p>Perform a complete test cycle with your test repository:</p><ul><li>Create New Online Repo for a local package (for example <code>$TABL</code>)</li><li>Execute a Pull (should install without any diffs)</li><li>Uninstall the repository (should not leave any objects of TADIR entries behind)</li><li>Repeat the process for a transportable package (for example <code>ZTABL</code>)</li></ul></li>",1),C=e("p",null,"Create a pull request for your implementation",-1),I=e("p",null,[t("Fork the abapGit repository and add a branch for your serializer class. Commit your implementation (the "),e("code",null,"zcl_abapgit_object_<type>"),t(" class) to the branch, and create a pull request to the abapGit repository. Reference your issue in the pull request and add a link to the test repository.")],-1),N={href:"https://github.com/abapGit/abapGit/blob/d0167ff97dcf6f90ed2721c40d194a5fb34f3ea0/src/objects/aff/zcl_abapgit_aff_registry.clas.abap#L51-L61",target:"_blank",rel:"noopener noreferrer"},O=e("p",null,"Update documentation",-1),F={href:"https://github.com/SAP/abap-file-formats",target:"_blank",rel:"noopener noreferrer"},L=e("li",null,[e("p",null,"Wait for feedback from and merge by abapGit maintainers"),e("p",null,"One of the maintainers will typically do a code review, run the test themselves, and either provide feedback or merge the pull request.")],-1),S=e("li",null,[e("p",null,"Completing tasks"),e("p",null,"After a successful merge, abapGit developer and standalone version will support the new object type. Congratulations. Feel free to tell the world about it!")],-1);function P(z,E){const a=s("ExternalLinkIcon"),i=s("RouterLink");return r(),c("div",null,[h,u,e("ol",null,[e("li",null,[e("p",null,[t("Check "),e("a",f,[t("Support for New Object Types"),o(a)])]),_,e("p",null,[t("If the object type is not included in the list, create an "),e("a",b,[t("issue"),o(a)]),t(' with the title "<OBJECT_TYPE>: Support for <OBJECT_TYPE_DESCRIPTION>" (for example, "TABL: Support for Tables"). Briefly describe why the object is needed and outline the implementation approach.')])]),m]),e("div",y,[g,e("p",null,[t("abapGit maintainers will add your issue to a "),e("a",w,[t("central list"),o(a)]),t(" and, if there's no further discussion required, close it.")])]),k,e("div",v,[T,e("p",null,[t("Your code must comply with the "),o(i,{to:"/development-guide/read-first/guidelines.html"},{default:n(()=>[t("development guidelines")]),_:1}),t(" for abapGit. Most notably your code must be compatible with 7.02 ABAP syntax and available standard SAP objects, use prefixing of variables, be pretty-printed, and pass all abaplint checks.")]),G]),e("ol",x,[e("li",null,[A,e("p",null,[t("Define a minimal test case for the new object type and commit it to a test repo in "),e("a",j,[t("abapGit Test Repositories"),o(a)]),t(`. If you don't have access, use the issue you created initially to ask for it. See "Testing" below for an example.`)])]),B,e("li",null,[C,I,e("p",null,[t("Note: Object types using the ABAP File Format must be added to the "),e("a",N,[t("AFF Registry"),o(a)]),t(" as well.")])]),e("li",null,[O,e("p",null,[t("Add the new object type to the "),o(i,{to:"/user-guide/reference/supported.html"},{default:n(()=>[t("list of supported objects")]),_:1}),t(". If the object type is using the ABAP File Format (JSON), add a link to the corresponding JSON schema in the "),e("a",F,[t("AFF repository"),o(a)]),t(".")])]),L,S])])}const J=l(d,[["render",P],["__file","task-list.html.vue"]]);export{J as default};
