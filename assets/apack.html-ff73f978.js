import{_ as i}from"./plugin-vue_export-helper-c27b6911.js";import{r as s,o as r,c,a as e,b as t,d as a,e as n}from"./app-a38731d3.js";const l={},d=e("p",null,[t("Packages with a class that implements "),e("code",null,"ZIF_APACK_MANIFEST"),t(" (the interface is automatically created at the initial start of abapGit) can define metadata that is interpreted by clients that support the APACK package and dependency management framework.")],-1),p={class:"hint-container info"},h=e("p",{class:"hint-container-title"},"Info",-1),u={href:"https://developers.sap.com/tutorials/abap-environment-abapgit.html",target:"_blank",rel:"noopener noreferrer"},m=e("p",null,[t("Such an APACK implementation class must reside in the top-level ABAP package which is serialized by abapGit so that it can be detected properly. After the class is instantiated, it needs to have the field "),e("code",null,"ZIF_APACK_MANIFEST~DESCRIPTOR"),t(" populated with the respective APACK metadata.")],-1),_=e("p",null,[e("strong",null,"Note:"),t(" Don't put any functionality in such implementation classes, only use them to advertise APACK metadata.")],-1),f={href:"https://maven.apache.org/pom.html#Maven_Coordinates",target:"_blank",rel:"noopener noreferrer"},A=e("li",null,[e("code",null,"group_id"),t(": Unique name for your organization or project, e.g. "),e("code",null,"github.com/abapGit")],-1),g=e("li",null,[e("code",null,"artifact_id"),t(": The name for the project, needs to be unique together with the specified "),e("code",null,"group_id"),t(", e.g. "),e("code",null,"abapGit")],-1),y=e("code",null,"version",-1),b={href:"https://semver.org/",target:"_blank",rel:"noopener noreferrer"},v=e("code",null,"1.85",-1),P=n("<li><code>repository_type</code>: Currently fixed to <code>abapGit</code> as it&#39;s currently the only supported repository type and is set automatically during serialization</li><li><code>git_url</code>: The URL where your main repository is located, e.g. <code>https://github.com/abapGit/abapGit.git</code></li><li><code>dependencies</code>: Optional, only needs to be filled if this project has dependencies to other projects. You only need to specify <code>group_id</code>, <code>artifact_id</code>, <code>version</code>, and <code>git_url</code> to identify the dependency. <code>target_package</code> is ignored during serialization. <strong>Note:</strong> Be sure to specify the <code>git_url</code> for each dependency properly as this is currently the only way how dependencies can automatically be resolved.</li>",3),k=n('<p>If such an implementation class is detected during the serialization process, a corresponding <code>.apack-manifest.xml</code> file will be created on the top level of the Git repository. This contains the APACK metadata information.</p><h3 id="apack-in-namespaces" tabindex="-1"><a class="header-anchor" href="#apack-in-namespaces" aria-hidden="true">#</a> APACK in Namespaces</h3><p>If your project is using a namespace, then using <code>ZIF_APACK_MANIFEST</code> will not work (since it&#39;s not part of the namespace, obviously). Simply copy <code>ZIF_APACK_MANIFEST</code> to <code>/namespace/ZIF_APACK_MANIFEST</code> and use this interface in your APACK implementation class (requires abapGit v1.126.0 or higher).</p><h3 id="transporting-apack-implementation-classes" tabindex="-1"><a class="header-anchor" href="#transporting-apack-implementation-classes" aria-hidden="true">#</a> Transporting APACK implementation classes</h3><p>The interface <code>ZIF_APACK_MANIFEST</code> is automatically created as a local object, i.e. in package <code>$TMP</code>. If you intend to transport projects containing an implementation class to follow-on systems, you either need to remove the implementation class from the transport or ensure that <code>ZIF_APACK_MANIFEST</code> is available on each follow-on system to avoid syntax errors. So, either let abapGit create it in all systems (don&#39;t do that on production) or change the package assignment to a package with the same transport target as your projects and transport them together.</p><h3 id="examples" tabindex="-1"><a class="header-anchor" href="#examples" aria-hidden="true">#</a> Examples</h3><p>See the sample code on GitHub (uses <code>IF_APACK_MANIFEST</code> which is exclusively available on the SAP Cloud Platform ABAP Environment. However, the descriptor format is compatible with <code>ZIF_APACK_MANIFEST</code>.):</p>',7),I={href:"https://github.com/SAP/abap-platform-yy",target:"_blank",rel:"noopener noreferrer"},C={href:"https://github.com/SAP/abap-platform-jak",target:"_blank",rel:"noopener noreferrer"};function S(T,w){const o=s("ExternalLinkIcon");return r(),c("div",null,[d,e("div",p,[h,e("p",null,[t("APACK including dependencies is currently only supported by abapGit for ABAP Development Tools (ADT). Please also see the "),e("a",u,[t("respective tutorial"),a(o)]),t(" for details.")])]),m,_,e("p",null,[t("The metadata follows the "),e("a",f,[t("POM format by Apache Maven"),a(o)]),t(" and specifies additional information as well:")]),e("ul",null,[A,g,e("li",null,[y,t(": The version of your project, should adhere to the "),e("a",b,[t("semantic versioning concept"),a(o)]),t(", e.g. "),v]),P]),k,e("ul",null,[e("li",null,[e("a",I,[t("YY Data Service"),a(o)])]),e("li",null,[e("a",C,[t("JSON ABAP Konverter"),a(o)]),t(" (specifies a dependency on the YY Data Service)")])])])}const N=i(l,[["render",S],["__file","apack.html.vue"]]);export{N as default};
