import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,a as s,o as t}from"./app-C6aoykUU.js";const n={};function p(l,e){return t(),a("div",null,e[0]||(e[0]=[s(`<p><strong>Disclaimer</strong>: this functionality is new and may change potentially.</p><h2 id="architecture-comments" tabindex="-1"><a class="header-anchor" href="#architecture-comments"><span>Architecture comments</span></a></h2><p>Kinds of popups:</p><ul><li>&quot;in-page&quot; - a hovering form, blocking the regular content</li><li>&quot;separate page&quot; - a regular page, yet that does not allow any page transitions others that <code>go back</code></li></ul><p>Ideally, a visualization component <strong>should not know that it is a popup</strong> (being agnostic). It is its wrapper that should know and manage the aspects. For example: <code>zcl_abapgit_gui_picklist</code> - a component that renders a list to choose an item from. This very same component can be rendered as a part of the page, as an in-page popup, or as a separate page popup.</p><h3 id="separate-page-popup" tabindex="-1"><a class="header-anchor" href="#separate-page-popup"><span>Separate-page popup</span></a></h3><p>Calling a separate-page popup would be initiated in the event handler and thus would look like this:</p><div class="language-abap line-numbers-mode" data-highlighter="shiki" data-ext="abap" data-title="abap" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  rs_handled-state </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> zcl_abapgit_gui=&gt;c_event_state-new_page.</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  rs_handled-page  </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> zcl_abapgit_gui_page_hoc=&gt;create(</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    ii_child_component </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> mo_popup_picklist </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">&quot; Or another component</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    iv_show_as_modal   </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> abap_true</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> ).</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Thus wrapping the popup component (e.g. <code>mo_popup_picklist</code> in this example) into the High Order page component. Passing <code>iv_show_as_modal</code> to <code>zcl_abapgit_gui_page_hoc</code> has the following effects on GUI:</p><ul><li>only <code>re_render</code>, <code>go_back</code>, and <code>no_more_act</code> states are accepted from the modal event handler (thus guaranteeing that popup will not forward to any other page rather than its caller)</li><li><code>router</code> is excluded from the event chain (thus also removing the main source of page redirections)</li></ul><h3 id="calling-a-popup-in-page" tabindex="-1"><a class="header-anchor" href="#calling-a-popup-in-page"><span>Calling a popup in-page</span></a></h3><p>The example below focuses on the functionality of <code>zcl_abapgit_gui_picklist</code>, yet it can be any other properly designed component in a popup.</p><ul><li>take into account that re-rendering in-page popup <em>also re-renders the underlying page</em>. If the caller page is potentially large, probably, an in-page popup is a sub-optimal choice.</li><li>the caller page should not interfere with the popup in terms of event and hotkey handling. Thus it must <strong>not</strong> register the handler if an in-page popup is visible.</li></ul><p>Sample implementation can be found for example in <code>zcl_abapgit_gui_page_sett_remo</code>, it includes these treats:</p><ul><li><code>mo_popup_picklist</code> - an instance of a popup (one of - the page can show several, yet all of them are managed by <code>zcl_abapgit_gui_picklist</code>)</li><li>in the event handler: the code that auto-detects if the popup is an in-page or independent</li></ul><div class="language-abap line-numbers-mode" data-highlighter="shiki" data-ext="abap" data-title="abap" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  IF</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> mo_popup_picklist </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">IS</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> BOUND</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">. </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">&quot; Uniform popup state handling</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    IF</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> mo_popup_picklist-&gt;is_in_page( ) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> abap_true</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">      rs_handled-state </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> zcl_abapgit_gui=&gt;c_event_state-re_render.</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">      &quot; in-page popup -&gt; rerender the page together with the popup</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    ELSE</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">      rs_handled-state </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> zcl_abapgit_gui=&gt;c_event_state-new_page.</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">      rs_handled-page  </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> zcl_abapgit_gui_page_hoc=&gt;create(</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        ii_child_component </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> mo_popup_picklist</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        iv_show_as_modal   </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> abap_true</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> ).</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">      &quot; separate page popup -&gt; switch to it</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    ENDIF</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  ENDIF</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>in <code>render</code>: if an &quot;in-page&quot; popup was initiated - skip own <code>register_handlers</code> (to avoid interference). Otherwise, add the popup to the render result.</li></ul><div class="language-abap line-numbers-mode" data-highlighter="shiki" data-ext="abap" data-title="abap" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    IF</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> mo_popup_picklist </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">IS</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> NOT</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> BOUND</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> OR</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> mo_popup_picklist-&gt;is_in_page( ) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> abap_false</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">      register_handlers( ).</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    ELSEIF</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> mo_popup_picklist-&gt;is_in_page( ) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> abap_true</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">      &quot; Block usual page events if the popup is an in-page popup</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">      ri_html-&gt;add( zcl_abapgit_gui_in_page_modal=&gt;create( mo_popup_picklist ) ).</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    ENDIF</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="initiating-the-popup-and-retrieving-the-result" tabindex="-1"><a class="header-anchor" href="#initiating-the-popup-and-retrieving-the-result"><span>Initiating the popup and retrieving the result</span></a></h2><p>Problem: SAP does not allow modal HTML forms, thus initialization and retrieving the result happens asynchronously and independently. It is more the developer&#39;s responsibility to keep this code readable.</p><p>The current &quot;state-of-art&quot; approach suggests (though can potentially be improved): process initiation and result reading <strong>in the same method</strong>, the &quot;mode&quot; should be dictated by parameters (e.g. <code>iv_is_return = abap_true</code>)</p><p>e.g. let&#39;s consider the <code>zcl_abapgit_gui_page_sett_remo-&gt;choose_branch</code>:</p><ul><li>initiation would end up with <code>mo_popup_picklist = ...</code> (create the component), thus marking the presence of the popup for the further code</li><li>the returning part <code>iv_is_return = abap_true</code> is checking if the popup was canceled by user <code>mo_popup_picklist-&gt;was_cancelled( )</code> and retrieves the chosen entry <code>mo_popup_picklist-&gt;get_result_item( ... )</code></li></ul><p>Now, it is important to uniformly initiate the return flow. In <code>zcl_abapgit_gui_page_sett_remo</code> this is done by <code>handle_picklist_state</code> which is called at the very beginning of the <code>render</code>. The method checks if the popup claims that it was fulfilled (confirmed or canceled) and, if yes, calls the appropriate <code>choose_*</code> method based on <code>mo_popup_picklist-&gt;id( )</code>.</p><p>Finally, one more way to escape the popup is by pressing the F3 or ESC - which are handled by GUI, not by the popup component. As a result of this:</p><ol><li>popup does not know that it was canceled</li><li>even further, the <code>back</code> will be applied to the caller page and not to the in-page popup!</li></ol><p>The solution to that is the <code>graceful back</code> procedure. Before going back the GUI send an event <code>go_back</code> to the top-most component (which happens to be the popup). Thus the component has a chance to:</p><ul><li>properly process the request to exit</li><li>send back the <code>re_render</code> or <code>no_more_act</code> states <ul><li>the <code>re_render</code> will result in the re-rendering of the parent (caller) page, yet with the popup in canceled/fulfilled state</li><li>the <code>no_more_act</code> gives a possibility to cancel the <code>go_back</code> action (e.g. to prevent exiting the popup when data was not saved)</li></ul></li></ul>`,28)]))}const r=i(n,[["render",p],["__file","html-popups.html.vue"]]),d=JSON.parse('{"path":"/development-guide/user-interface/html-popups.html","title":"HTML Popups","lang":"en-US","frontmatter":{"title":"HTML Popups","category":"ui","order":60,"description":"Disclaimer: this functionality is new and may change potentially. Architecture comments Kinds of popups: \\"in-page\\" - a hovering form, blocking the regular content \\"separate page...","head":[["meta",{"property":"og:url","content":"https://docs.abapgit.org/development-guide/user-interface/html-popups.html"}],["meta",{"property":"og:site_name","content":"abapGit Docs"}],["meta",{"property":"og:title","content":"HTML Popups"}],["meta",{"property":"og:description","content":"Disclaimer: this functionality is new and may change potentially. Architecture comments Kinds of popups: \\"in-page\\" - a hovering form, blocking the regular content \\"separate page..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2023-07-10T07:06:13.000Z"}],["meta",{"property":"article:modified_time","content":"2023-07-10T07:06:13.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"HTML Popups\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-07-10T07:06:13.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"abapGit\\",\\"url\\":\\"https://github.com/abapGit\\"}]}"]]},"headers":[{"level":2,"title":"Architecture comments","slug":"architecture-comments","link":"#architecture-comments","children":[{"level":3,"title":"Separate-page popup","slug":"separate-page-popup","link":"#separate-page-popup","children":[]},{"level":3,"title":"Calling a popup in-page","slug":"calling-a-popup-in-page","link":"#calling-a-popup-in-page","children":[]}]},{"level":2,"title":"Initiating the popup and retrieving the result","slug":"initiating-the-popup-and-retrieving-the-result","link":"#initiating-the-popup-and-retrieving-the-result","children":[]}],"git":{"createdTime":1688972773000,"updatedTime":1688972773000,"contributors":[{"name":"Alexander Tsybulsky","username":"Alexander Tsybulsky","email":"sbcgua@users.noreply.github.com","commits":1,"url":"https://github.com/Alexander Tsybulsky"},{"name":"Marc Bernard","username":"Marc Bernard","email":"59966492+mbtools@users.noreply.github.com","commits":1,"url":"https://github.com/Marc Bernard"}]},"readingTime":{"minutes":2.65,"words":795},"filePathRelative":"development-guide/user-interface/html-popups.md","localizedDate":"July 10, 2023","autoDesc":true,"excerpt":"<p><strong>Disclaimer</strong>: this functionality is new and may change potentially.</p>\\n<h2>Architecture comments</h2>\\n<p>Kinds of popups:</p>\\n<ul>\\n<li>\\"in-page\\" - a hovering form, blocking the regular content</li>\\n<li>\\"separate page\\" - a regular page, yet that does not allow any page transitions others that <code>go back</code></li>\\n</ul>"}');export{r as comp,d as data};
