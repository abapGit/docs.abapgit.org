import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{o as t,c as o,e as i}from"./app-6ac6a2a8.js";const a={},s=i('<h2 id="overview" tabindex="-1"><a class="header-anchor" href="#overview" aria-hidden="true">#</a> Overview</h2><p>An abapGit Serializer is an ABAP class that supports creating, reading, updating, and deleting (CRUD) objects of a given object type. In abapGit, the reading of an object is implemented in a <code>serialize</code> method. Create and update are combined into a <code>deserialize</code> method. There is a <code>delete</code> method to remove an object from the system.</p><p>All object serializers must implement interface <code>ZIF_ABAPGIT_OBJECT</code> and be named <code>ZCL_ABAPGIT_OBJECT_{type}</code>, where <code>{type}</code> is the corresponding SAP object type (<code>TADIR-OBJECT</code>). As a description for the class, use <code>{type} - {description of type}</code> (for example, <code>TABL - Table</code>). It&#39;s recommended to use <code>ZCL_ABAPGIT_OBJECTS_SUPER</code> as a superclass since it provides several convenient methods.</p><p>In general, only SAP Standard APIs for retrieving and updating object information shall be used. If that is not possible, try using <code>ZCL_ABAPGIT_OBJECTS_GENERIC</code> which handles any logical transport object.</p><p>As code is stored in git, no usernames, timestamps, states (e.g. active/inactive), or other system-specific information should be part of the serialized object files. Only the active, most recent, and consistent version of an object shall be serialized.</p><p>Auto-generated artifacts should be skipped if possible, for example, a CDS view might generate a VIEW artifact, and the VIEW should not be serialized, as it is not something the developer creates.</p><p>If an inactive version of an object exists, the class shall indicate so in the <code>is_active</code> method. abapGit displays such objects with a yellow bolt icon in the repo view. However, the inactive version must be ignored by the serializer.</p><p>As a result, a repo shall only contain the definition of active objects. Therefore, the deserializer can assume that the repo has a consistent object definition and shall create an active version of the object (or update and activate it).</p>',8),n=[s];function c(r,d){return t(),o("div",null,n)}const p=e(a,[["render",c],["__file","overview.html.vue"]]);export{p as default};
