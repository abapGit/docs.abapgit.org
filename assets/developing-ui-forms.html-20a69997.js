import{_ as s}from"./plugin-vue_export-helper-c27b6911.js";import{r as e,o,c as t,a as p,b as n,d as i,w as l,e as c}from"./app-ea00d9df.js";const r={},d=c(`<h2 id="general" tabindex="-1"><a class="header-anchor" href="#general" aria-hidden="true">#</a> General</h2><p>There is a helper class to render HTML forms - <code>zcl_abapgit_html_form</code>. To see an example - open the online repo creation dialog (code: class <code>zcl_abapgit_gui_page_addonline</code>). Typical usage:</p><ul><li>create the form (preferably in constructor - it is descriptive)</li><li>add fields one by one</li><li>for complex fields (radio) - add <code>options</code> right after the field</li><li>on render - pass <code>zcl_abapgit_string_map</code> instance of values and, optionally, a map of validation results (see below)</li><li>fields can be required (<code>iv_required = abap_true</code>)</li><li>fields can have tooltips (<code>iv_hint = &#39;help for the field&#39;</code>)</li><li>text fields may have placeholders (<code>iv_placeholder = &#39;...&#39;</code>)</li><li>text fields may be uppercased (<code>iv_upper_case = abap_bool</code> - for normalization - see below)</li><li>text fields may have side-actions - button next to them - passing current form state to abap for additional logic and re-render</li><li>a form may have one or more <em>commands</em> at the bottom. <em>Main</em> ones (<code>iv_is_main = abap_true</code>) - will be highlighted</li></ul><div class="language-abap line-numbers-mode" data-ext="abap"><pre class="language-abap"><code>
<span class="token keyword">DATA</span> lo_form <span class="token keyword">TYPE</span> <span class="token keyword">REF</span> <span class="token keyword">TO</span> zcl_abapgit_html_form<span class="token punctuation">.</span>

lo_form <span class="token operator">=</span> zcl_abapgit_html_form<span class="token token-operator punctuation">=&gt;</span>create<span class="token punctuation">(</span> iv_form_id <span class="token operator">=</span> <span class="token string">&#39;add-repo-online-form&#39;</span> <span class="token punctuation">)</span><span class="token punctuation">.</span>
lo_form<span class="token token-operator punctuation">-&gt;</span>text<span class="token punctuation">(</span>
    iv_name        <span class="token operator">=</span> c_id<span class="token token-operator punctuation">-</span>package
    iv_side_action <span class="token operator">=</span> c_event<span class="token token-operator punctuation">-</span>choose_package
    iv_required    <span class="token operator">=</span> abap_true
    iv_label       <span class="token operator">=</span> <span class="token string">&#39;Package&#39;</span>
    iv_hint        <span class="token operator">=</span> <span class="token string">&#39;SAP package for the code (should be a dedicated one)&#39;</span>
    iv_placeholder <span class="token operator">=</span> <span class="token string">&#39;Z... / $...&#39;</span> <span class="token punctuation">)</span><span class="token punctuation">.</span>
lo_form<span class="token token-operator punctuation">-&gt;</span>radio<span class="token punctuation">(</span>
    iv_name        <span class="token operator">=</span> c_id<span class="token token-operator punctuation">-</span>folder_logic
    iv_default_value <span class="token operator">=</span> zif_abapgit_dot_abapgit<span class="token token-operator punctuation">=&gt;</span>c_folder_logic<span class="token token-operator punctuation">-</span>prefix
    iv_label       <span class="token operator">=</span> <span class="token string">&#39;Folder logic&#39;</span>
    iv_hint        <span class="token operator">=</span> <span class="token string">&#39;Define how package folders are named in the repo&#39;</span> <span class="token punctuation">)</span><span class="token punctuation">.</span>
lo_form<span class="token token-operator punctuation">-&gt;</span>option<span class="token punctuation">(</span>
    iv_label       <span class="token operator">=</span> <span class="token string">&#39;Prefix&#39;</span>
    iv_value       <span class="token operator">=</span> zif_abapgit_dot_abapgit<span class="token token-operator punctuation">=&gt;</span>c_folder_logic<span class="token token-operator punctuation">-</span>prefix <span class="token punctuation">)</span><span class="token punctuation">.</span>
lo_form<span class="token token-operator punctuation">-&gt;</span>option<span class="token punctuation">(</span>
    iv_label       <span class="token operator">=</span> <span class="token string">&#39;Full&#39;</span>
    iv_value       <span class="token operator">=</span> zif_abapgit_dot_abapgit<span class="token token-operator punctuation">=&gt;</span>c_folder_logic<span class="token token-operator punctuation">-</span>full <span class="token punctuation">)</span><span class="token punctuation">.</span>
lo_form<span class="token token-operator punctuation">-&gt;</span>checkbox<span class="token punctuation">(</span>
    iv_name        <span class="token operator">=</span> c_id<span class="token token-operator punctuation">-</span>ignore_subpackages
    iv_label       <span class="token operator">=</span> <span class="token string">&#39;Ignore subpackages&#39;</span>
    iv_hint        <span class="token operator">=</span> <span class="token string">&#39;Syncronize root package only&#39;</span> <span class="token punctuation">)</span><span class="token punctuation">.</span>

lo_form<span class="token token-operator punctuation">-&gt;</span>command<span class="token punctuation">(</span>
    iv_label       <span class="token operator">=</span> <span class="token string">&#39;Clone online repo&#39;</span>
    iv_is_main     <span class="token operator">=</span> abap_true
    iv_action      <span class="token operator">=</span> c_event<span class="token token-operator punctuation">-</span>add_online_repo <span class="token punctuation">)</span><span class="token punctuation">.</span>

ro_html<span class="token token-operator punctuation">-&gt;</span>add<span class="token punctuation">(</span> lo_form<span class="token token-operator punctuation">-&gt;</span>render<span class="token punctuation">(</span>
    iv_form_class     <span class="token operator">=</span> <span class="token string">&#39;dialog w600px m-em5-sides margin-v1&#39;</span>
    io_values         <span class="token operator">=</span> mo_form_data
    io_validation_log <span class="token operator">=</span> mo_validation_log <span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">.</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="values-normalization" tabindex="-1"><a class="header-anchor" href="#values-normalization" aria-hidden="true">#</a> Values Normalization</h2><p>The class has <code>validate_normalize_form_data</code> method as a default validator/normalizer. It accepts <code>string_map</code> with field <code>key-values</code>. And they run through them doing the following:</p><ul><li>fields, missing in the form definition will raise an exception</li><li>text fields, marked with <code>upper_case</code> during definition, are converted to uppercase</li><li>checkbox fields, convert <code>on</code> value (HTML default), to <code>abap_true</code></li></ul><div class="language-abap line-numbers-mode" data-ext="abap"><pre class="language-abap"><code><span class="token eol-comment comment">&quot; lo_field_map:</span>
<span class="token eol-comment comment">&quot; </span><span class="token string">&#39;name&#39;</span>        <span class="token operator">=</span> <span class="token string">&#39;xxx&#39;</span>
<span class="token eol-comment comment">&quot; </span><span class="token string">&#39;package&#39;</span>     <span class="token operator">=</span> <span class="token string">&#39;$mypack&#39;</span>  &lt;-- <span class="token keyword">with</span> <span class="token string">&#39;iv_upper_case = true&#39;</span> <span class="token keyword">during</span> <span class="token keyword">definition</span>
<span class="token eol-comment comment">&quot; </span><span class="token string">&#39;my_checkbox&#39;</span> <span class="token operator">=</span> <span class="token string">&#39;on&#39;</span>

lo_field_map <span class="token operator">=</span> lo_form<span class="token token-operator punctuation">-&gt;</span>validate_normalize_form_data<span class="token punctuation">(</span> lo_field_map <span class="token punctuation">)</span><span class="token punctuation">.</span>

<span class="token eol-comment comment">&quot; </span><span class="token string">&#39;name&#39;</span>        <span class="token operator">=</span> <span class="token string">&#39;xxx&#39;</span>
<span class="token eol-comment comment">&quot; </span><span class="token string">&#39;package&#39;</span>     <span class="token operator">=</span> <span class="token string">&#39;$MYPACK&#39;</span>
<span class="token eol-comment comment">&quot; </span><span class="token string">&#39;my_checkbox&#39;</span> <span class="token operator">=</span> <span class="token string">&#39;X&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="values-and-validation" tabindex="-1"><a class="header-anchor" href="#values-and-validation" aria-hidden="true">#</a> Values and Validation</h2><p>The class is designed so that its instance is more a declaration of the form, that can be created once and then rendered each time with different values. On render you pass a CSS class of the form, values, and optionally validation results.</p><p><code>Values</code> is an instance of <code>zcl_abapgit_string_map</code> - key-value map, where the key must be the same as the field name (thus it&#39;s recommended to define names as constants). E.g.</p><div class="language-abap line-numbers-mode" data-ext="abap"><pre class="language-abap"><code>lo_form<span class="token token-operator punctuation">-&gt;</span>text<span class="token punctuation">(</span>
    iv_name        <span class="token operator">=</span> c_id<span class="token token-operator punctuation">-</span>package <span class="token eol-comment comment">&quot; &lt;&lt;&lt;&lt;&lt; NAME</span>
    iv_label       <span class="token operator">=</span> <span class="token string">&#39;Package&#39;</span> <span class="token punctuation">)</span><span class="token punctuation">.</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token keyword">DATA</span> mo_form_data <span class="token keyword">TYPE</span> <span class="token keyword">REF</span> <span class="token keyword">TO</span> zcl_abapgit_string_map<span class="token punctuation">.</span>
<span class="token keyword">CREATE</span> <span class="token keyword">OBJECT</span> mo_form_data<span class="token punctuation">.</span>
mo_form_data<span class="token token-operator punctuation">-&gt;</span>set<span class="token punctuation">(</span>
    iv_key <span class="token operator">=</span> c_id<span class="token token-operator punctuation">-</span>package
    iv_val <span class="token operator">=</span> <span class="token string">&#39;XYZ&#39;</span> <span class="token punctuation">)</span><span class="token punctuation">.</span>             <span class="token eol-comment comment">&quot; &lt;&lt;&lt;&lt;&lt; VALUE</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
lo_form<span class="token token-operator punctuation">-&gt;</span>render<span class="token punctuation">(</span>
    iv_form_class <span class="token operator">=</span> <span class="token string">&#39;dialog w600px m-em5-sides margin-v1&#39;</span>
    io_values     <span class="token operator">=</span> mo_form_data <span class="token punctuation">)</span><span class="token punctuation">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>If a validation log is passed, then it&#39;s checked for a non-empty value of the field name, and renders it as the error message.</p><div class="language-abap line-numbers-mode" data-ext="abap"><pre class="language-abap"><code>lo_form<span class="token token-operator punctuation">-&gt;</span>text<span class="token punctuation">(</span>
    iv_name        <span class="token operator">=</span> c_id<span class="token token-operator punctuation">-</span>package <span class="token eol-comment comment">&quot; &lt;&lt;&lt;&lt;&lt; NAME</span>
    iv_label       <span class="token operator">=</span> <span class="token string">&#39;Package&#39;</span> <span class="token punctuation">)</span><span class="token punctuation">.</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token keyword">DATA</span> mo_validation_log <span class="token keyword">TYPE</span> <span class="token keyword">REF</span> <span class="token keyword">TO</span> zcl_abapgit_string_map<span class="token punctuation">.</span>
<span class="token keyword">CREATE</span> <span class="token keyword">OBJECT</span> mo_validation_log<span class="token punctuation">.</span>
mo_form_data<span class="token token-operator punctuation">-&gt;</span>set<span class="token punctuation">(</span>
    iv_key <span class="token operator">=</span> c_id<span class="token token-operator punctuation">-</span>package          <span class="token eol-comment comment">&quot; &lt;&lt;&lt;&lt;&lt; SAME NAME</span>
    iv_val <span class="token operator">=</span> <span class="token string">&#39;OMG! It crushed!&#39;</span> <span class="token punctuation">)</span><span class="token punctuation">.</span> <span class="token eol-comment comment">&quot; &lt;&lt;&lt;&lt;&lt; ERROR MESSAGE</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
lo_form<span class="token token-operator punctuation">-&gt;</span>render<span class="token punctuation">(</span>
    iv_form_class     <span class="token operator">=</span> <span class="token string">&#39;dialog w600px m-em5-sides margin-v1&#39;</span>
    io_values         <span class="token operator">=</span> mo_form_data
    io_validation_log <span class="token operator">=</span> mo_validation_log <span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">.</span> <span class="token eol-comment comment">&quot; &lt;&lt;&lt; ERRORS HERE</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,14);function u(k,m){const a=e("RouterLink");return o(),t("div",null,[p("p",null,[n("This doc covers the HTML form component in abapGit UI. See also the "),i(a,{to:"/development-guide/user-interface/developing-ui.html"},{default:l(()=>[n("UI - HTML pages")]),_:1}),n(".")]),d])}const b=s(r,[["render",u],["__file","developing-ui-forms.html.vue"]]);export{b as default};
