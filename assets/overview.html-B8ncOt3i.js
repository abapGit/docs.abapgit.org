import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,a as i,o}from"./app-Baw2R2NJ.js";const r={};function n(s,e){return o(),a("div",null,e[0]||(e[0]=[i('<h2 id="overview" tabindex="-1"><a class="header-anchor" href="#overview"><span>Overview</span></a></h2><p>An abapGit Serializer is an ABAP class that supports creating, reading, updating, and deleting (CRUD) objects of a given object type. In abapGit, the reading of an object is implemented in a <code>serialize</code> method. Create and update are combined into a <code>deserialize</code> method. There is a <code>delete</code> method to remove an object from the system.</p><p>All object serializers must implement interface <code>ZIF_ABAPGIT_OBJECT</code> and be named <code>ZCL_ABAPGIT_OBJECT_{type}</code>, where <code>{type}</code> is the corresponding SAP object type (<code>TADIR-OBJECT</code>). As a description for the class, use <code>{type} - {description of type}</code> (for example, <code>TABL - Table</code>). It&#39;s recommended to use <code>ZCL_ABAPGIT_OBJECTS_SUPER</code> as a superclass since it provides several convenient methods.</p><p>In general, only SAP Standard APIs for retrieving and updating object information shall be used. If that is not possible, try using <code>ZCL_ABAPGIT_OBJECTS_GENERIC</code> which handles any logical transport object.</p><p>As code is stored in git, no usernames, timestamps, states (e.g. active/inactive), or other system-specific information should be part of the serialized object files. Only the active, most recent, and consistent version of an object shall be serialized.</p><p>Auto-generated artifacts should be skipped if possible, for example, a CDS view might generate a VIEW artifact, and the VIEW should not be serialized, as it is not something the developer creates.</p><p>If an inactive version of an object exists, the class shall indicate so in the <code>is_active</code> method. abapGit displays such objects with a yellow bolt icon in the repo view. However, the inactive version must be ignored by the serializer.</p><p>As a result, a repo shall only contain the definition of active objects. Therefore, the deserializer can assume that the repo has a consistent object definition and shall create an active version of the object (or update and activate it).</p>',8)]))}const p=t(r,[["render",n],["__file","overview.html.vue"]]),l=JSON.parse('{"path":"/development-guide/serializers/overview.html","title":"Overview","lang":"en-US","frontmatter":{"title":"Overview","category":"serializers","order":10,"description":"Overview An abapGit Serializer is an ABAP class that supports creating, reading, updating, and deleting (CRUD) objects of a given object type. In abapGit, the reading of an obje...","head":[["meta",{"property":"og:url","content":"https://docs.abapgit.org/development-guide/serializers/overview.html"}],["meta",{"property":"og:site_name","content":"abapGit Docs"}],["meta",{"property":"og:title","content":"Overview"}],["meta",{"property":"og:description","content":"Overview An abapGit Serializer is an ABAP class that supports creating, reading, updating, and deleting (CRUD) objects of a given object type. In abapGit, the reading of an obje..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2023-07-19T20:34:30.000Z"}],["meta",{"property":"article:modified_time","content":"2023-07-19T20:34:30.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Overview\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-07-19T20:34:30.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"abapGit\\",\\"url\\":\\"https://github.com/abapGit\\"}]}"]]},"headers":[{"level":2,"title":"Overview","slug":"overview","link":"#overview","children":[]}],"git":{"createdTime":1689798870000,"updatedTime":1689798870000,"contributors":[{"name":"Marc Bernard","username":"Marc Bernard","email":"59966492+mbtools@users.noreply.github.com","commits":1,"url":"https://github.com/Marc Bernard"}]},"readingTime":{"minutes":0.99,"words":298},"filePathRelative":"development-guide/serializers/overview.md","localizedDate":"July 19, 2023","autoDesc":true,"excerpt":"<h2>Overview</h2>\\n<p>An abapGit Serializer is an ABAP class that supports creating, reading, updating, and deleting (CRUD) objects of a given object type. In abapGit, the reading of an object is implemented in a <code>serialize</code> method. Create and update are combined into a <code>deserialize</code> method. There is a <code>delete</code> method to remove an object from the system.</p>"}');export{p as comp,l as data};
