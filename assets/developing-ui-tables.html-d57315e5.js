import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as a,c as s,e}from"./app-e24038b1.js";const t="/img/ui_table_simple.png",o="/img/ui_table_2_level_head.png",p="/img/ui_table_styled.png",l="/img/ui_table_sorted.png",i={},c=e(`<p><em>The html-table component is still experimental and may be subject to change. Cross-check with the actual code in the codebase (e.g., <code>zcl_abapgit_gui_page_codi_base</code> and its subclasses).</em></p><h2 id="general-concept-and-features" tabindex="-1"><a class="header-anchor" href="#general-concept-and-features" aria-hidden="true">#</a> General concept and features</h2><ul><li>Create an instance of <code>zcl_abapgit_html_table</code></li><li>Define column structure with <code>define_column</code></li><li>Render the component, supplying the data and the <em>renderer</em></li><li>While rendering, the html table instance will call the appropriate <em>renderer</em> methods for each row and cell, yet hiding all routine table construction inside</li></ul><h3 id="features" tabindex="-1"><a class="header-anchor" href="#features" aria-hidden="true">#</a> Features</h3><ul><li>styling individual cells and rows</li><li>auto-marking columns with <code>column_id</code> data attribute</li><li>sorting support</li></ul><h2 id="simplest-table-example" tabindex="-1"><a class="header-anchor" href="#simplest-table-example" aria-hidden="true">#</a> Simplest table example</h2><p>Suppose you have a table of this structure:</p><div class="language-abap line-numbers-mode" data-ext="abap"><pre class="language-abap"><code>  <span class="token keyword">begin</span> <span class="token keyword">of</span> ty_data<span class="token punctuation">,</span>
    <span class="token keyword">id</span>   <span class="token keyword">type</span> <span class="token keyword">i</span><span class="token punctuation">,</span>
    <span class="token keyword">name</span> <span class="token keyword">type</span> string<span class="token punctuation">,</span>
    city <span class="token keyword">type</span> string<span class="token punctuation">,</span>
  <span class="token keyword">end</span> <span class="token keyword">of</span> ty_data<span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Define the table structure:</p><ul><li><code>column_id</code> is the id to identify the column in further callbacks, in css styles, and also to be used as <em>default</em> field name to extract the value from a table record.</li><li><code>column_title</code> is a visual name of the html table column.</li></ul><div class="language-abap line-numbers-mode" data-ext="abap"><pre class="language-abap"><code>  li_table <span class="token operator">=</span> zcl_abapgit_html_table<span class="token token-operator punctuation">=&gt;</span>create<span class="token punctuation">(</span>
    <span class="token punctuation">)</span>-&gt;define_column<span class="token punctuation">(</span>
      iv_column_id    <span class="token operator">=</span> <span class="token string">&#39;id&#39;</span>
      iv_column_title <span class="token operator">=</span> <span class="token string">&#39;ID&#39;</span>
    <span class="token punctuation">)</span>-&gt;define_column<span class="token punctuation">(</span>
      iv_column_id    <span class="token operator">=</span> <span class="token string">&#39;name&#39;</span>
      iv_column_title <span class="token operator">=</span> <span class="token string">&#39;Name&#39;</span>
    <span class="token punctuation">)</span>-&gt;define_column<span class="token punctuation">(</span>
      iv_column_id    <span class="token operator">=</span> <span class="token string">&#39;city&#39;</span>
      iv_column_title <span class="token operator">=</span> <span class="token string">&#39;Location&#39;</span> <span class="token punctuation">)</span><span class="token punctuation">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Implement rendering methods <code>render_cell</code> and, optionally, <code>get_row_attrs</code>. This can be done directly in a calling component (typically), or in separate local classes (e.g. if there are several tables in the page).</p><div class="language-abap line-numbers-mode" data-ext="abap"><pre class="language-abap"><code>  <span class="token keyword">method</span> zif_abapgit_html_table<span class="token token-operator punctuation">~</span>render_cell<span class="token punctuation">.</span>
    <span class="token eol-comment comment">&quot; This is the simplest form of rendering</span>
    <span class="token eol-comment comment">&quot; </span><span class="token string">\`iv_value\`</span> contains content <span class="token keyword">of</span> <span class="token string">\`column_id\`</span> <span class="token keyword">field</span> <span class="token keyword">of</span> <span class="token keyword">table</span> record
    <span class="token eol-comment comment">&quot; </span><span class="token string">\`content\`</span> attribute <span class="token keyword">of</span> the <span class="token keyword">returning</span> <span class="token keyword">structure</span>
    <span class="token eol-comment comment">&quot;  is the text value to be rendered in the cell</span>
    rs_render<span class="token token-operator punctuation">-</span>content <span class="token operator">=</span> <span class="token token-operator punctuation">|</span><span class="token string-template string"></span><span class="token token-operator punctuation">{</span> iv_value <span class="token token-operator punctuation">}</span><span class="token string-template string"></span><span class="token token-operator punctuation">|</span><span class="token punctuation">.</span>
  <span class="token keyword">endmethod</span><span class="token punctuation">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Finally, call the table <code>render</code> method to produce html. Pass the data table to be rendered and the <em>renderer</em> instance.</p><div class="language-abap line-numbers-mode" data-ext="abap"><pre class="language-abap"><code>  ri_html<span class="token token-operator punctuation">-&gt;</span>add<span class="token punctuation">(</span> li_table<span class="token token-operator punctuation">-&gt;</span>render<span class="token punctuation">(</span>
    ii_renderer <span class="token operator">=</span> me
    it_data     <span class="token operator">=</span> <span class="token keyword">value</span> ty_data_tab<span class="token punctuation">(</span>
      <span class="token punctuation">(</span> <span class="token keyword">id</span> <span class="token operator">=</span> <span class="token number">1</span>  <span class="token keyword">name</span> <span class="token operator">=</span> <span class="token string">&#39;John&#39;</span>    city <span class="token operator">=</span> <span class="token string">&#39;London&#39;</span> <span class="token punctuation">)</span>
      <span class="token punctuation">(</span> <span class="token keyword">id</span> <span class="token operator">=</span> <span class="token number">2</span>  <span class="token keyword">name</span> <span class="token operator">=</span> <span class="token string">&#39;Pierre&#39;</span>  city <span class="token operator">=</span> <span class="token string">&#39;Paris&#39;</span> <span class="token punctuation">)</span>
    <span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+t+'" alt="Simplest table" tabindex="0" loading="lazy"><figcaption>Simplest table</figcaption></figure><h2 id="_2-level-header" tabindex="-1"><a class="header-anchor" href="#_2-level-header" aria-hidden="true">#</a> 2-level header</h2><p>You can create groups of columns with <code>define_column_group</code>. See an example in <code>zcl_abapgit_gui_page_whereused</code> class. <code>title</code> and <code>id</code> are both options, but you have to start before the first column if you plan to use groups (because it calculates spans from start).</p><figure><img src="'+o+`" alt="2-level header" tabindex="0" loading="lazy"><figcaption>2-level header</figcaption></figure><h2 id="css-styles" tabindex="-1"><a class="header-anchor" href="#css-styles" aria-hidden="true">#</a> CSS styles</h2><p>There are several options to styling your table:</p><ul><li>First, you can pass the element id, and css class of the table itself to the <code>render</code> method.</li><li>Passing <code>iv_wrap_in_div</code> parameter will wrap your table in another <code>div</code> with the given css class name, primarily for visual styling purposes (e.g. see padded borders and rounded corners in the screenshot below).</li></ul><p>There are default CSS styles in abapGit to reuse if you don&#39;t want to bother with any specific styling - <code>default-table</code> and <code>default-table-container</code>, respectively, for the wrapping <code>div</code>.</p><div class="language-abap line-numbers-mode" data-ext="abap"><pre class="language-abap"><code>  ri_html<span class="token token-operator punctuation">-&gt;</span>add<span class="token punctuation">(</span> li_table<span class="token token-operator punctuation">-&gt;</span>render<span class="token punctuation">(</span>
    iv_wrap_in_div <span class="token operator">=</span> <span class="token string">&#39;default-table-container&#39;</span>
    iv_css_class   <span class="token operator">=</span> <span class="token string">&#39;default-table&#39;</span>
    iv_id          <span class="token operator">=</span> <span class="token string">&#39;my-addr-tab&#39;</span>
    it_data <span class="token operator">=</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">)</span><span class="token punctuation">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+p+`" alt="Styled table" tabindex="0" loading="lazy"><figcaption>Styled table</figcaption></figure><p>Rendering methods <code>render_cell</code> and <code>get_row_attrs</code> allow specifying css classes for individual cells and rows.</p><div class="language-abap line-numbers-mode" data-ext="abap"><pre class="language-abap"><code>  <span class="token keyword">method</span> zif_abapgit_html_table<span class="token token-operator punctuation">~</span>get_row_attrs<span class="token punctuation">.</span>
    rs_attrs<span class="token token-operator punctuation">-</span>css_class <span class="token operator">=</span> <span class="token string">&#39;my-tab-row&#39;</span><span class="token punctuation">.</span>
  <span class="token keyword">endmethod</span><span class="token punctuation">.</span>

  <span class="token keyword">method</span> zif_abapgit_html_table<span class="token token-operator punctuation">~</span>render_cell<span class="token punctuation">.</span>
    <span class="token eol-comment comment">&quot; ...</span>
    rs_render<span class="token token-operator punctuation">-</span>css_class <span class="token operator">=</span> <span class="token string">&#39;my-cell&#39;</span><span class="token punctuation">.</span>
  <span class="token keyword">endmethod</span><span class="token punctuation">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Finally, passing the <code>iv_with_cids = abap_true</code> param to <code>render</code> will auto-mark cells with data attribute <code>data-cid</code> with respecting <code>column_id</code>. This enables easy indirect CSS styling or reassembling memory representation of the table in Javascript.</p><div class="language-abap line-numbers-mode" data-ext="abap"><pre class="language-abap"><code>  ri_html<span class="token token-operator punctuation">-&gt;</span>add<span class="token punctuation">(</span> li_table<span class="token token-operator punctuation">-&gt;</span>render<span class="token punctuation">(</span>
    iv_with_cids     <span class="token operator">=</span> abap_true
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">)</span><span class="token punctuation">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>get_row_attrs</code> also allows passing a custom data attribute. Similarly, this can be used in CSS styling or JS.</p><div class="language-abap line-numbers-mode" data-ext="abap"><pre class="language-abap"><code>  <span class="token keyword">method</span> zif_abapgit_html_table<span class="token token-operator punctuation">~</span>get_row_attrs<span class="token punctuation">.</span>
    rs_attrs<span class="token token-operator punctuation">-</span>data<span class="token token-operator punctuation">-</span>name <span class="token operator">=</span> <span class="token string">&#39;status&#39;</span><span class="token punctuation">.</span>
    rs_attrs<span class="token token-operator punctuation">-</span>data<span class="token token-operator punctuation">-</span>value <span class="token operator">=</span> <span class="token string">&#39;error&#39;</span><span class="token punctuation">.</span>
  <span class="token keyword">endmethod</span><span class="token punctuation">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Resulting HTML:</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>my-addr-tab<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>default-table<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>thead</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span> <span class="token attr-name">data-cid</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>id<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>ID<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span> <span class="token attr-name">data-cid</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>name<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>Name<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span> <span class="token attr-name">data-cid</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>city<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>Location<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>thead</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tbody</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span> <span class="token attr-name">data-status</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>error<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name">data-cid</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>id<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name">data-cid</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>name<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>John<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name">data-cid</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>city<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>London<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">&gt;</span></span>
      ...
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tbody</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">&gt;</span></span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>CSS example:</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">table td[data-cid=&quot;id&quot;]</span> <span class="token punctuation">{</span> <span class="token property">font-weight</span><span class="token punctuation">:</span> bold<span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token selector">table tr[data-kind=&quot;error&quot;]</span> <span class="token punctuation">{</span> <span class="token property">background-color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>If you use 2-level header and pass <code>iv_group_id</code> it will also appear as a <code>data-gid</code> attribute in all relevant cells.</p><h2 id="cell-rendering" tabindex="-1"><a class="header-anchor" href="#cell-rendering" aria-hidden="true">#</a> Cell rendering</h2><p>You can define your column so that the <code>column_id</code> and the field to take a value from have different names. In the example below the <code>iv_value</code> in <code>render_cell</code> will be taken from the <code>person_id</code> field in the table structure.</p><div class="language-abap line-numbers-mode" data-ext="abap"><pre class="language-abap"><code>  li_table<span class="token token-operator punctuation">-&gt;</span>define_column<span class="token punctuation">(</span>
    iv_column_id    <span class="token operator">=</span> <span class="token string">&#39;id&#39;</span>
    iv_column_title <span class="token operator">=</span> <span class="token string">&#39;ID&#39;</span>
    iv_from_field   <span class="token operator">=</span> <span class="token string">&#39;person_id&#39;</span> <span class="token punctuation">)</span><span class="token punctuation">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>You are not obliged to use <code>iv_value</code> in <code>render_cell</code>. Among the parameters of <code>render_cell</code> and <code>get_row_attrs</code> you will find also:</p><ul><li><code>is_row</code> - full table record being processed, to access the data flexibly and/or conditionally</li><li><code>iv_row_index</code> - ... its index</li><li><code>iv_table_id</code> - table id passed to the <code>render</code> (in case you want to render several tables with the same <em>renderer</em> instance. Though it is generally not the best practice, better avoid it and create separate local classes for each renderer)</li><li><code>iv_column_id</code> - column id of the current table column (for <code>render_cell</code> only)</li></ul><p>Using the <code>html</code> attribute, you can return an instance of <code>zif_abapgit_html</code>. Use this if you want to return more complex HTML content.</p><div class="language-abap line-numbers-mode" data-ext="abap"><pre class="language-abap"><code>  <span class="token keyword">method</span> zif_abapgit_html_table<span class="token token-operator punctuation">~</span>render_cell<span class="token punctuation">.</span>
    rs_render<span class="token token-operator punctuation">-</span>html <span class="token operator">=</span> zcl_abapgit_html<span class="token token-operator punctuation">=&gt;</span>create<span class="token punctuation">(</span> <span class="token punctuation">)</span>-&gt;add_a<span class="token punctuation">(</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">)</span><span class="token punctuation">.</span>
  <span class="token keyword">endmethod</span><span class="token punctuation">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="sorting" tabindex="-1"><a class="header-anchor" href="#sorting" aria-hidden="true">#</a> Sorting</h2><p><code>html_table</code> component does not manage sorting over the data itself but rather provides helpers to visualize it and process appropriate events. The sorting itself should be done externally.</p><figure><img src="`+l+`" alt="Sorted table" tabindex="0" loading="lazy"><figcaption>Sorted table</figcaption></figure><p>The sorting UI is triggered by passing <code>is_sorting_state</code> to the <code>render</code>. This is a structure consisting of two fields - <code>column_id</code> and <code>descending</code> value - which A) tells the component to visualize sorting B) tells which column is sorted and in which direction ( <code>descending = true/false</code> ).</p><p>In terms of CSS styles all sorting arrow are styled with <code>sort-arrow</code> class and the active one has additionally <code>sort-active</code> class. When designing an own CSS style, please don&#39;t create <code>.sort-arrow</code> names classes, but rather specify a more complete path <code>table.my-tab th span.sort-arrow</code> to avoid conflicts with the <code>default-table</code> style.</p><p>You can also pass <code>iv_sortable = abap_false</code> to <code>define_column</code> to remove the sorting possibility for a fiven column (by default all collumns are sortable).</p><p>Technical-wise sorting markers are links with events defined like <code>sapevent:sort_by:id:dsc</code> where <code>id</code> is a column id. This event must be properly processed in the host component. To simplify handling there is a helper method to identify and parse such an event. So the easiest way to handle sorting would be placing this code to the <code>on_event</code>:</p><div class="language-abap line-numbers-mode" data-ext="abap"><pre class="language-abap"><code>  <span class="token keyword">data</span> ls_sorting_request <span class="token keyword">type</span> zif_abapgit_html_table<span class="token token-operator punctuation">=&gt;</span>ty_sorting_state<span class="token punctuation">.</span>
  ls_sorting_request <span class="token operator">=</span> zcl_abapgit_html_table<span class="token token-operator punctuation">=&gt;</span>detect_sorting_request<span class="token punctuation">(</span> ii_event<span class="token token-operator punctuation">-&gt;</span>mv_action <span class="token punctuation">)</span><span class="token punctuation">.</span>
  <span class="token keyword">if</span> ls_sorting_request <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token keyword">initial</span><span class="token punctuation">.</span>
    ms_sorting_state <span class="token operator">=</span> ls_sorting_request<span class="token punctuation">.</span>
    rs_handled<span class="token token-operator punctuation">-</span>state <span class="token operator">=</span> zcl_abapgit_gui<span class="token token-operator punctuation">=&gt;</span>c_event_state<span class="token token-operator punctuation">-</span>re_render<span class="token punctuation">.</span>
  <span class="token keyword">endif</span><span class="token punctuation">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>... and then applying the <code>ms_sorting_state</code> elsewhere before rendering the table</p><h3 id="in-table-sorting" tabindex="-1"><a class="header-anchor" href="#in-table-sorting" aria-hidden="true">#</a> In-table sorting</h3><p>This feature is <strong>experimental</strong>, use with care. See <code>zcl_abapgit_gui_page_whereused</code> as an example.</p><p>To simplify sorting handling you may create your table component as a class member, and pass <code>is_initial_sorting_state</code>.</p><div class="language-abap line-numbers-mode" data-ext="abap"><pre class="language-abap"><code><span class="token keyword">DATA</span> ls_sorting_state <span class="token keyword">TYPE</span> zif_abapgit_html_table<span class="token token-operator punctuation">=&gt;</span>ty_sorting_state<span class="token punctuation">.</span>
ls_sorting_state<span class="token token-operator punctuation">-</span>column_id <span class="token operator">=</span> <span class="token string">&#39;xyz&#39;</span><span class="token punctuation">.</span>
mi_table <span class="token operator">=</span> zcl_abapgit_html_table<span class="token token-operator punctuation">=&gt;</span>create<span class="token punctuation">(</span>
  is_initial_sorting_state <span class="token operator">=</span> ls_sorting_state <span class="token punctuation">)</span><span class="token punctuation">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>In the event handling method use <code>process_sorting_request</code> instead of <code>detect_sorting_request</code>.</p><div class="language-abap line-numbers-mode" data-ext="abap"><pre class="language-abap"><code><span class="token keyword">IF</span> mi_table<span class="token token-operator punctuation">-&gt;</span>process_sorting_request<span class="token punctuation">(</span> ii_event<span class="token token-operator punctuation">-&gt;</span>mv_action <span class="token punctuation">)</span> <span class="token operator">=</span> abap_true<span class="token punctuation">.</span>
  rs_handled<span class="token token-operator punctuation">-</span>state <span class="token operator">=</span> zcl_abapgit_gui<span class="token token-operator punctuation">=&gt;</span>c_event_state<span class="token token-operator punctuation">-</span>re_render<span class="token punctuation">.</span>
  <span class="token keyword">RETURN</span><span class="token punctuation">.</span>
<span class="token keyword">ENDIF</span><span class="token punctuation">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>With this approach you will not need any other sorting logic to implement the table component will handle sorting for you. Please mind the caveats though:</p><ul><li>The <code>column_id</code> (or supplied <code>from_field</code>) <strong>must</strong> exist as a table field (for sortable columns)</li><li>To do the sorting the component creates a copy of the data internally. Mind memory consumption.</li></ul>`,60),r=[c];function d(u,k){return a(),s("div",null,r)}const v=n(i,[["render",d],["__file","developing-ui-tables.html.vue"]]);export{v as default};
