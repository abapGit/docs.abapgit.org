import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as l,b as n,d as t,e as i,f as o,a as r,r as d,o as p}from"./app-Cl-VKkzR.js";const c={};function h(u,e){const a=d("RouteLink");return p(),l("div",null,[e[18]||(e[18]=n("h2",{id:"object-types",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#object-types"},[n("span",null,"Object Types")])],-1)),n("p",null,[e[1]||(e[1]=t("abapGit is merged into a ")),i(a,{to:"/user-guide/getting-started/install.html"},{default:o(()=>e[0]||(e[0]=[t("stand-alone version")])),_:1}),e[2]||(e[2]=t(". For this reason, the only allowed object types for ")),e[3]||(e[3]=n("em",null,"new",-1)),e[4]||(e[4]=t(" repository objects are classes and interfaces. In particular, function groups or modules must ")),e[5]||(e[5]=n("em",null,"not",-1)),e[6]||(e[6]=t(" be included."))]),e[19]||(e[19]=r('<p>Exceptions for existing objects:</p><ul><li>Transaction <code>ZABAPGIT</code></li><li>Program <code>ZABAPGIT</code> and includes</li><li>Function group <code>ZABAPGIT_PARALLEL</code> for parallel serialization (only available in the developer version)</li><li>MIME objects <code>ZABAPGIT_*</code> for UI (CSS, JS, and fonts)</li></ul><h2 id="conventions" tabindex="-1"><a class="header-anchor" href="#conventions"><span>Conventions</span></a></h2><h3 id="naming" tabindex="-1"><a class="header-anchor" href="#naming"><span>Naming</span></a></h3><h4 id="object-prefixing" tabindex="-1"><a class="header-anchor" href="#object-prefixing"><span>Object Prefixing</span></a></h4><p>Classes and interfaces are prefixed using <code>zcl_abapgit_</code> or <code>zif_abapgit_</code> (<code>zcx_abapgit_</code> for exception classes, <code>lcl_</code> and <code>ltcl_</code> for local and test classes).</p><h3 id="object-descriptions" tabindex="-1"><a class="header-anchor" href="#object-descriptions"><span>Object Descriptions</span></a></h3>',7)),n("p",null,[e[8]||(e[8]=t("The description of objects should begin with ")),e[9]||(e[9]=n("code",null,"abapGit - ...",-1)),e[10]||(e[10]=t(" (for example, ")),e[11]||(e[11]=n("code",null,"abapGit - Repository Content List",-1)),e[12]||(e[12]=t("). For ")),i(a,{to:"/development-guide/serializers/overview.html"},{default:o(()=>e[7]||(e[7]=[t("serializer classes")])),_:1}),e[13]||(e[13]=t(", the text should contain the ")),e[14]||(e[14]=n("code",null,"TADIR",-1)),e[15]||(e[15]=t(" object type and description (for example, ")),e[16]||(e[16]=n("code",null,"abapGit - INTF - Interface (ABAP Objects)",-1)),e[17]||(e[17]=t(")."))]),e[20]||(e[20]=r('<h4 id="sub-object-descriptions" tabindex="-1"><a class="header-anchor" href="#sub-object-descriptions"><span>Sub-object Descriptions</span></a></h4><p>To document sub-objects like class methods and parameters, you should use <a href="https://help.sap.com/doc/abapdocu_latest_index_htm/latest/en-US/index.htm?file=abendoccomment.htm" target="_blank" rel="noopener noreferrer">ABAP Doc</a> comments. You can see an example in <a href="https://github.com/abapGit/abapGit/blob/40c5cd7212dd7fece00667cab31afc55830a7310/src/zcx_abapgit_exception.clas.abap#L50-L76" target="_blank" rel="noopener noreferrer">zcx_abapgit_exception</a>.</p><div class="hint-container warning"><p class="hint-container-title">Warning</p><p>Do not maintain texts for methods and parameters in SE24/SE80 and don&#39;t use <code>&lt;p class=&quot;shorttext synchronized&quot;&gt;</code> in ADT. This will lead to errors when checking the class/interface XML file in GitHub.</p></div><h4 id="variable-prefixing" tabindex="-1"><a class="header-anchor" href="#variable-prefixing"><span>Variable Prefixing</span></a></h4><p>Variables are prefixed using the standard setting in <a href="https://docs.abapopenchecks.org/checks/69/" target="_blank" rel="noopener noreferrer">abapOpenChecks Naming Conventions</a></p><h3 id="downport" tabindex="-1"><a class="header-anchor" href="#downport"><span>Downport</span></a></h3><h4 id="syntax" tabindex="-1"><a class="header-anchor" href="#syntax"><span>Syntax</span></a></h4><p>abapGit is targeted for <a href="https://help.sap.com/doc/abapdocu_latest_index_htm/latest/en-US/index.htm?file=abennews-71.htm" target="_blank" rel="noopener noreferrer">version 7.02</a> and higher. Therefore, the code must only contain expressions and statements that work on 7.02.</p><p><a href="https://abaplint.org" target="_blank" rel="noopener noreferrer">abaplint</a> will automatically check every pull request for language syntax that is compatible with 7.02.</p><h4 id="standard-objects" tabindex="-1"><a class="header-anchor" href="#standard-objects"><span>Standard Objects</span></a></h4><p>The code must only reference standard SAP objects (classes, interfaces, DDIC types) that exist in version 7.02 and higher. Referencing objects that do <em>not</em> exist in 7.02 creates syntax errors and therefore requires using dynamic ABAP. DDIC types that do <em>not</em> exist in 7.02 should be replaced by local type definitions.</p><h3 id="file-formats" tabindex="-1"><a class="header-anchor" href="#file-formats"><span>File Formats</span></a></h3><p>General file format guidelines are specified in <a href="https://github.com/abapGit/abapGit/blob/main/.editorconfig" target="_blank" rel="noopener noreferrer">.editorconfig</a>. If you are using abapGit to push files to the repository, these guidelines are followed automatically.</p><p>If you are editing files outside of SAP GUI or ADT, for example on GitHub.com or in VS Code, the most common issues are using <code>cr</code> instead of <code>lf</code> at end of line, missing new line at end of file, and missing <code>BOM</code> at beginning of XML files. Please ensure that your IDE is setup to follow the <code>.editorconfig</code> specifications to avoid any issues.</p><p>For more details, see <a href="https://editorconfig.org" target="_blank" rel="noopener noreferrer">editorconfig.org</a>.</p><div class="hint-container info"><p class="hint-container-title">Info</p><p>VS Code requires an extension for <code>.editorconfig</code> which you can find at <a href="https://marketplace.visualstudio.com/items?itemName=EditorConfig.EditorConfig" target="_blank" rel="noopener noreferrer">marketplace</a>.</p></div><h3 id="formatting-the-source-code" tabindex="-1"><a class="header-anchor" href="#formatting-the-source-code"><span>Formatting the Source Code</span></a></h3><h4 id="line-width" tabindex="-1"><a class="header-anchor" href="#line-width"><span>Line Width</span></a></h4><p>The maximum width of ABAP source code should be set at 120 characters per line and is checked during linting.</p><h4 id="pretty-printer" tabindex="-1"><a class="header-anchor" href="#pretty-printer"><span>Pretty Printer</span></a></h4><p>Use pretty-printer, keywords upper case + indentation, <a href="https://docs.abapopenchecks.org/checks/06/" target="_blank" rel="noopener noreferrer">abapOpenChecks</a> can be used for checking this.</p><h3 id="dynpros" tabindex="-1"><a class="header-anchor" href="#dynpros"><span>Dynpros</span></a></h3><p>For the user interface, we are moving towards everything in HTML, i.e. new Dynpro screens or the use of Dynpro screens and popups should <em>not</em> be added to the source code.</p><h3 id="abaplint" tabindex="-1"><a class="header-anchor" href="#abaplint"><span>abaplint</span></a></h3><p>Pull requests must pass all abaplint configured checks before they can be merged. You find the current rules in <a href="https://github.com/abapGit/abapGit/blob/main/abaplint.json" target="_blank" rel="noopener noreferrer">abaplint.json</a>.</p><div class="hint-container info"><p class="hint-container-title">Info</p><p>You can view abaplint findings directly in abapGit using an <a href="https://github.com/Marc-Bernard-Tools/ABAP-Lint-Ext-for-abapGit" target="_blank" rel="noopener noreferrer">extension</a>.</p></div><h3 id="eslint" tabindex="-1"><a class="header-anchor" href="#eslint"><span>eslint</span></a></h3><p>JavaScript is checked using eslint. You can find the rules <a href="https://github.com/abapGit/abapGit/blob/main/.eslintrc.yaml" target="_blank" rel="noopener noreferrer">here</a>. All JavaScript code has to adhere to ES5 (<a href="https://en.wikipedia.org/wiki/ECMAScript_version_history" target="_blank" rel="noopener noreferrer">ECMAScript 2009</a>) to be compatible with the IE-based HTML browser control used in older releases of SAP GUI.</p><h3 id="internationalization-i18n" tabindex="-1"><a class="header-anchor" href="#internationalization-i18n"><span>Internationalization (I18N)</span></a></h3><p>abapGit supports only the English language. Neither objects nor text literals are translated. Therefore, all objects shall be set to English as the original language, and text literals in the code shall be maintained in English.</p><p>Since there&#39;s only one language, using the <code>##NO_TEXT</code> pragma is not required and will actually lead to lint errors. The exceptions are global class and interface definitions, where the pragmas are added automatically by <code>SE24/SE80</code>.</p>',31))])}const g=s(c,[["render",h],["__file","guidelines.html.vue"]]),f=JSON.parse('{"path":"/development-guide/read-first/guidelines.html","title":"Development Guidelines","lang":"en-US","frontmatter":{"title":"Development Guidelines","category":"read-first","order":20,"description":"Object Types abapGit is merged into a . For this reason, the only allowed object types for new repository objects are classes and interfaces. In particular, function groups or m...","head":[["meta",{"property":"og:url","content":"https://docs.abapgit.org/development-guide/read-first/guidelines.html"}],["meta",{"property":"og:site_name","content":"abapGit Docs"}],["meta",{"property":"og:title","content":"Development Guidelines"}],["meta",{"property":"og:description","content":"Object Types abapGit is merged into a . For this reason, the only allowed object types for new repository objects are classes and interfaces. In particular, function groups or m..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2024-05-15T13:53:11.000Z"}],["meta",{"property":"article:modified_time","content":"2024-05-15T13:53:11.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Development Guidelines\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-05-15T13:53:11.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"abapGit\\",\\"url\\":\\"https://github.com/abapGit\\"}]}"]]},"headers":[{"level":2,"title":"Object Types","slug":"object-types","link":"#object-types","children":[]},{"level":2,"title":"Conventions","slug":"conventions","link":"#conventions","children":[{"level":3,"title":"Naming","slug":"naming","link":"#naming","children":[]},{"level":3,"title":"Object Descriptions","slug":"object-descriptions","link":"#object-descriptions","children":[]},{"level":3,"title":"Downport","slug":"downport","link":"#downport","children":[]},{"level":3,"title":"File Formats","slug":"file-formats","link":"#file-formats","children":[]},{"level":3,"title":"Formatting the Source Code","slug":"formatting-the-source-code","link":"#formatting-the-source-code","children":[]},{"level":3,"title":"Dynpros","slug":"dynpros","link":"#dynpros","children":[]},{"level":3,"title":"abaplint","slug":"abaplint","link":"#abaplint","children":[]},{"level":3,"title":"eslint","slug":"eslint","link":"#eslint","children":[]},{"level":3,"title":"Internationalization (I18N)","slug":"internationalization-i18n","link":"#internationalization-i18n","children":[]}]}],"git":{"createdTime":1528902323000,"updatedTime":1715781191000,"contributors":[{"name":"Marc Bernard","username":"Marc Bernard","email":"59966492+mbtools@users.noreply.github.com","commits":11,"url":"https://github.com/Marc Bernard"},{"name":"Ludwig Stockbauer-Muhr","username":"Ludwig Stockbauer-Muhr","email":"35834861+stockbal@users.noreply.github.com","commits":1,"url":"https://github.com/Ludwig Stockbauer-Muhr"},{"name":"Lars Hvam","username":"Lars Hvam","email":"larshp@hotmail.com","commits":2,"url":"https://github.com/Lars Hvam"},{"name":"Frederik Hudák","username":"Frederik Hudák","email":"frederik.hudak@gmail.com","commits":1,"url":"https://github.com/Frederik Hudák"},{"name":"Johannes Konings","username":"Johannes Konings","email":"johannes.konings@outlook.com","commits":1,"url":"https://github.com/Johannes Konings"},{"name":"larshp","username":"larshp","email":"larshp@hotmail.com","commits":1,"url":"https://github.com/larshp"}]},"readingTime":{"minutes":2.3,"words":689},"filePathRelative":"development-guide/read-first/guidelines.md","localizedDate":"June 13, 2018","autoDesc":true,"excerpt":"<h2>Object Types</h2>\\n<p>abapGit is merged into a <a href=\\"/user-guide/getting-started/install.html\\" target=\\"_blank\\">stand-alone version</a>. For this reason, the only allowed object types for <em>new</em> repository objects are classes and interfaces. In particular, function groups or modules must <em>not</em> be included.</p>"}');export{g as comp,f as data};
